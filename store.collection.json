{
	"info": {
		"_postman_id": "a7149bd7-a254-4158-b43f-e8870db49368",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "43794983"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const expectedPageSize = 2; \r",
									"\r",
									"pm.test(\"Pagination Test: Status 200 and correct number of items\", async () => {\r",
									"    const response = await pm.sendRequest(`http://localhost:3000/users?page=1&pageSize=${expectedPageSize}`);\r",
									"    pm.expect(response).to.have.status(200);\r",
									"\r",
									"    const jsonData = response.json();\r",
									"    pm.expect(jsonData).to.be.an('array', \"Response should be an array\");\r",
									"    pm.expect(jsonData.length).to.be.at.most(expectedPageSize, `Response should contain at most ${expectedPageSize} items`);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response is a JSON object\", () => {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response contains expected keys\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.keys(['id', 'name', 'price', 'sku', 'description']);",
									"});",
									"",
									"pm.test(\"Data types are correct\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"    pm.expect(jsonData.name).to.be.a('string');",
									"    pm.expect(jsonData.price).to.be.a('number');",
									"    pm.expect(jsonData.sku).to.be.a('number'); // Assuming SKU is a number",
									"    pm.expect(jsonData.description).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Specific values are as expected\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(3);",
									"    pm.expect(jsonData.name).to.eql(\"apple\");",
									"    pm.expect(jsonData.price).to.eql(30);",
									"    pm.expect(jsonData.description).to.eql(\"awesome\");",
									"    pm.expect(jsonData.sku).to.eql(999921312423312);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/products/3"
					},
					"response": []
				},
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Successful POST request\", () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 8,\r\n    \"sku\": 123321123,\r\n    \"description\": \"wouh\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body contains the updated name\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"banana\");",
									"});",
									"",
									"pm.test(\"Response body contains the updated description\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"changed description\");",
									"});",
									"",
									"pm.test(\"Response body contains the correct ID\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"});",
									"",
									"pm.test(\"Response body contains the correct SKU\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.sku).to.eql(123321123);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body contains the deleted product's ID\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4); ",
									"   ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/products/4"
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Orders are sorted by ID (ascending)\", () => {",
									"    const responseJson = pm.response.json();",
									"    let isSorted = true;",
									"",
									"    for (let i = 0; i < responseJson.length - 1; i++) {",
									"        if (responseJson[i].id > responseJson[i + 1].id) {",
									"            isSorted = false;",
									"            break;",
									"        }",
									"    }",
									"",
									"    pm.expect(isSorted).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response contains expected keys\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.keys(['id', 'name', 'sku']);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/orders/3"
					},
					"response": []
				},
				{
					"name": "Create order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Place order successful - Status code 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body contains the new order ID and variable is set\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"",
									"    pm.collectionVariables.set(\"createdOrderID\", jsonData.id);",
									"    console.log(\"Created Order ID set:\", pm.collectionVariables.get(\"createdOrderID\")); ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body contains the updated id\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"});",
									"",
									"pm.test(\"Response body contains the updated order name\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"order5\");",
									"});",
									"",
									"pm.test(\"Response body contains the correct SKU\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.sku).to.eql(123425445656765);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete order successful\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify order is no longer accessible after deletion\", async () => {",
									"    const createdOrderID = pm.collectionVariables.get(\"createdOrderID\");",
									"    const baseUrl = pm.environment.get(\"baseUrl\");",
									"    console.log(\"Base URL at verification:\", baseUrl);",
									"    console.log(\"Verifying deletion for Order ID:\", createdOrderID);",
									"    try {",
									"        const getResponse = await pm.sendRequest({",
									"            url: `${baseUrl}/orders/${createdOrderID}`,",
									"            method: 'GET'",
									"        });",
									"        pm.expect(getResponse).to.have.status(404, \"Order should still be accessible after deletion\");",
									"    } catch (error) {",
									"        console.error(\"Error during GET request (verification):\", error);",
									"        pm.expect.fail(`GET request failed: ${error.message}`);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/orders/{{createdOrderID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Users are sorted by ID (ascending)\", () => {",
									"    const responseJson = pm.response.json();",
									"    const items = responseJson; ",
									"    if (items && items.length > 1) {",
									"        let isSorted = true;",
									"",
									"        for (let i = 0; i < items.length - 1; i++) {",
									"            if (items[i].id > items[i + 1].id) {",
									"                isSorted = false;",
									"                break;",
									"            }",
									"        }",
									"",
									"        pm.expect(isSorted).to.be.true;",
									"    } else {",
									"        pm.expect(items).to.exist;",
									"    }",
									"});",
									"",
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"dateOfBirth\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"emailVerified\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"signUpDate\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"level\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"dateOfBirth\",",
									"        \"emailVerified\",",
									"        \"signUpDate\",",
									"        \"status\",",
									"        \"level\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"dateOfBirth\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"emailVerified\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"signUpDate\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"level\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"dateOfBirth\",",
									"        \"emailVerified\",",
									"        \"signUpDate\",",
									"        \"status\",",
									"        \"level\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"dateOfBirth\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"emailVerified\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"signUpDate\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"level\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"dateOfBirth\",",
									"        \"emailVerified\",",
									"        \"signUpDate\",",
									"        \"status\",",
									"        \"level\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"dateOfBirth\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"emailVerified\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"signUpDate\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"level\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"dateOfBirth\",",
									"        \"emailVerified\",",
									"        \"signUpDate\",",
									"        \"status\",",
									"        \"level\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"dateOfBirth\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"emailVerified\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"signUpDate\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"level\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"dateOfBirth\",",
									"        \"emailVerified\",",
									"        \"signUpDate\",",
									"        \"status\",",
									"        \"level\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"dateOfBirth\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"emailVerified\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"signUpDate\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"level\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"dateOfBirth\",",
									"        \"emailVerified\",",
									"        \"signUpDate\",",
									"        \"status\",",
									"        \"level\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"dateOfBirth\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"emailVerified\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"signUpDate\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"level\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"dateOfBirth\",",
									"        \"emailVerified\",",
									"        \"signUpDate\",",
									"        \"status\",",
									"        \"level\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"dateOfBirth\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"emailVerified\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"signUpDate\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"level\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"dateOfBirth\",",
									"        \"emailVerified\",",
									"        \"signUpDate\",",
									"        \"status\",",
									"        \"level\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"dateOfBirth\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"emailVerified\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"signUpDate\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"level\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"dateOfBirth\",",
									"        \"emailVerified\",",
									"        \"signUpDate\",",
									"        \"status\",",
									"        \"level\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"dateOfBirth\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"emailVerified\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"signUpDate\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"level\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"firstName\",",
									"        \"lastName\",",
									"        \"email\",",
									"        \"dateOfBirth\",",
									"        \"emailVerified\",",
									"        \"signUpDate\",",
									"        \"status\",",
									"        \"level\"",
									"      ]",
									"    }",
									"  ]",
									"};",
									"",
									"pm.test(\"Response body should match JSON schema\", async () => {",
									"    const response = await pm.sendRequest(\"http://localhost:3000/users\");",
									"    pm.expect(response).to.have.status(200);",
									"    const jsonData = response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",  () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned user ID matches requested ID\", () => {",
									"    const jsonData = pm.response.json();",
									"    const requestedId = pm.request.url.path.pop(); ",
									"    pm.expect(jsonData.id.toString()).to.eql(requestedId);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time is within acceptable range\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3?id=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update user successful - Status code 200 OK and correct id in response\", () => {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id').that.eql(10); ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users/"
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete user successful - Status code 200 OK\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/users/10"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "orderSku",
			"value": "999921312423312",
			"type": "string"
		},
		{
			"key": "createdOrderId\n",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdOrderID",
			"value": ""
		}
	]
}